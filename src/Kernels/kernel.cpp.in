#include <mlopen/kernel.hpp>
#include <mlopen/stringutils.hpp>
#include <map>
#include <algorithm>
#include "mlopen_kernels.h"

namespace mlopen {

const std::map<std::string, std::string>& kernels()
{
    static const std::map<std::string, std::string> data{
    	${INIT_KERNELS}
    };
    return data;
}


std::string GetKernelSrc(std::string name)
{
    // Use the base name of the string
    int start = 0;
    auto slash = name.find_last_of("/\\");
    if (slash != std::string::npos)
    {
        start = slash + 1;
    }

    int len = name.size();
    auto ex = name.rfind('.');
    if (ex != std::string::npos)
    {
        len = ex - start;
    }

    auto key = name.substr(start, len);
    // Convert to uppercase
    std::transform(key.begin(), key.end(), key.begin(), ::toupper);

    auto it = kernels().find(key);
    if (it == kernels().end()) MLOPEN_THROW("Failed to load kernel source: " + key);

    return it->second;
}

} // namespace mlopen
