#include <mlopen/kernel.hpp>
#include <mlopen/replace.hpp>
#include <map>
#include <algorithm>
#include "mlopen_kernels.h"

namespace mlopen {

static const std::map<std::string, std::string> kernels{
	${INIT_KERNELS}
};

std::string GetKernelSrc(const std::string& name, std::string& ext)
{
    // Use the base name of the string
    int start = 0;
    auto slash = name.find_last_of("/\\");
    if (slash != std::string::npos)
    {
        start = slash + 1;
    }

    int len = name.size();
    auto ext_start = name.rfind(".");
    if (ext_start != std::string::npos)
    {
        ext = name.substr(ext_start + 1);
        len = ext_start - start;
    }
    else
    {
        ext = "";
    }

    auto key = name.substr(start, len);
    // Convert to uppercase
    std::transform(key.begin(), key.end(), key.begin(), ::toupper);
    std::transform(ext.begin(), ext.end(), ext.begin(), ::toupper);

    if (ext == "CL")
        return ReplaceString(kernels.at(key), "inline", "static inline");
    else
        return kernels.at(key);
}

} // namespace mlopen
